[{"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\index.js":"1","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\reportWebVitals.js":"2","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\App.jsx":"3","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Error.jsx":"4","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Home.jsx":"5","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\constants\\style.js":"6","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Order.jsx":"7"},{"size":787,"mtime":1690708444914,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1690192016021,"results":"10","hashOfConfig":"9"},{"size":188,"mtime":1690595063700,"results":"11","hashOfConfig":"9"},{"size":151,"mtime":1690443247650,"results":"12","hashOfConfig":"9"},{"size":1199,"mtime":1690603167340,"results":"13","hashOfConfig":"9"},{"size":147,"mtime":1690433043958,"results":"14","hashOfConfig":"9"},{"size":21683,"mtime":1690775659847,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mswirt",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\index.js",[],[],"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\App.jsx",[],[],"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Error.jsx",[],[],"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Home.jsx",["40","41","42","43","44","45"],[],"import {React, useState} from 'react'\r\nimport { FlexCol, PaddingX, Padding, FlexRow } from '../constants/style'\r\nimport { Fade, Slide } from 'react-reveal';\r\nimport Pulse from 'react-reveal/Pulse';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function Home() {\r\n    const navigate = useNavigate();\r\n\r\n    const handleOrderClick = () => {\r\n      // '/order' 경로로 페이지 이동\r\n      navigate('/order');\r\n    };\r\n\r\n  return (\r\n    //bg-background에서 background는 tailwind.config.js에서 설정했습니다\r\n    //tailwindcss에 속성을 어떻게 줄 수 있는지는 https://tailwindcss.com/docs/overflow#class-reference 사이트에 있습니다\r\n    //font-Gangwon은 index.css에 정의했습니다\r\n    //Fade 등 위에 import된 효과들은 react-reveal로, 애니메이션 효과입니다\r\n    <div className={`${FlexCol} bg-brown relative z-0 h-screen`}>\r\n        \r\n        <Fade>\r\n            <button \r\n            className={`bg-yellow w-2/5 h-[200px] rounded-[30px] pt-8`}\r\n            onClick={handleOrderClick}>\r\n                <p className={'font-Gangwon text-[80px]'}>주문하기</p>\r\n            </button>\r\n        </Fade>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\constants\\style.js",[],[],"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Order.jsx",["46","47","48","49","50","51","52","53","54","55","56","57","58"],[],"import {React, useState, useEffect, useRef} from 'react'\r\nimport { FlexCol, PaddingX, Padding, FlexRow } from '../constants/style'\r\nimport { Fade, Slide } from 'react-reveal';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Pulse from 'react-reveal/Pulse';\r\nimport Bell from '../assets/images/Bell.png';\r\nimport Enlarge from '../assets/images/Enlarge.png';\r\nimport dummy from '../data/menu.json';\r\nimport Modal from 'react-modal';\r\nimport ModalTop from '../assets/images/ModalTop.png'\r\n\r\n\r\nexport default function Order() {\r\n\r\n  //페이지 전환 useNavigate()(vs Link)\r\n  const navigate = useNavigate();\r\n  const handleClick = () => {\r\n    navigate('/');\r\n  };\r\n  const handleDoneClick = () => {\r\n    navigate('/done');\r\n  }\r\n\r\n  //Modal 상태 관리 useState()\r\n  //useEffect() \r\n  // 1번째인자 -> sideeffect를 정의하는 콜백함수, \r\n  //콜백함수는 컴포넌트가 마운트되었을때(처음 렌더링될 때) 실행되며, 컴포넌트가 업데이트될 때마다 실행된다. \r\n  // 2번째인자 -> 의존성배열로서, 컴포넌트의 특정 상태나 프롭스가 변경되었을 때에만 콜백함수를 실행하도록 설정할수 있다.\r\n  const [isModalOpen, setIsModalOpen] = useState(false); \r\n  const [isModalFirstOpen, setIsModalFirstOpen] = useState(false);\r\n  const [isModalTwoOpen, setIsModalTwoOpen] = useState(false);\r\n  useEffect(() => {\r\n    if (isModalOpen) {\r\n      const timer = setTimeout(() => {\r\n        setIsModalOpen(false);\r\n      }, 5000); \r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [isModalOpen]);\r\n\r\n  \r\n  //돋보기 아이콘 useState()\r\n  const [enlargeState, setEnlargeState] = useState(false);\r\n  const handleEnlargeClick = () => {\r\n    setEnlargeState(!enlargeState);\r\n  };\r\n\r\n\r\n  //menuList 관련\r\n  const menuData = dummy; \r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n  const [orderedItems, setOrderedItems] = useState([]);\r\n  //oderedItems 구하기\r\n  const updateOrder = (menu, detail, count) => {\r\n    const updatedItems = [...orderedItems];\r\n    const menuKeys = Object.keys(menuData);\r\n  \r\n    if (count === 0) {\r\n      const index = updatedItems.findIndex(\r\n        (item) => item.menu === menu && item.detail === detail\r\n      );\r\n      if (index !== -1) {\r\n        updatedItems.splice(index, 1);\r\n      }\r\n    } else {\r\n      for (const key of menuKeys) {\r\n        const menuItem = menuData[key].find(\r\n          (item) => item.menu === menu && item.detail === detail\r\n        );\r\n        if (menuItem) {\r\n          const { menu, detail, price } = menuItem;\r\n          const index = updatedItems.findIndex(\r\n            (item) => item.menu === menu && item.detail === detail\r\n          );\r\n          if (index !== -1) {\r\n            updatedItems[index].count = count;\r\n          } else {\r\n            updatedItems.push({ menu, detail, price, count });\r\n          }\r\n          break; \r\n        }\r\n      }\r\n    }\r\n  \r\n    setOrderedItems(updatedItems);\r\n    updateTotalPrice();\r\n  };\r\n  //totalPrice 구하기\r\n  const updateTotalPrice = () => {\r\n    let totalPrice = 0;\r\n    orderedItems.forEach((item) => {\r\n      totalPrice += item.price * item.count;\r\n    });\r\n    setTotalPrice(totalPrice);\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateTotalPrice();\r\n  }, [orderedItems]);\r\n\r\n\r\n  //orderItems에 따른 버튼 활성화\r\n  const isButtonEnabled = orderedItems.length > 0;\r\n\r\n  //수량 counts\r\n  const initialItemCount = {\r\n    떡볶이류: dummy.떡볶이류.map(() => 0),\r\n    사이드류: dummy.사이드류.map(() => 0),\r\n    세트메뉴: dummy.세트메뉴.map(() => 0),\r\n  };\r\n  const [itemCounts, setItemCounts] = useState(initialItemCount);\r\n  const updateItemCount = (category, menu, detail, count) => {\r\n    const updatedCounts = { ...itemCounts };\r\n    const index = dummy[category].findIndex(\r\n      (item) => item.menu === menu && item.detail === detail\r\n    );\r\n    if (index !== -1) {\r\n      updatedCounts[category][index] = count;\r\n      setItemCounts(updatedCounts);\r\n      updateOrder(menu, detail, count);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={`${FlexCol} bg-beige relative z-0 h-full`} >\r\n      <Fade>\r\n      <div className={`${FlexRow} m-10`}>\r\n        <button onClick={() => handleClick()} className={`w-[30%]`}>\r\n          <img src='/images/logo.png' />\r\n        </button>\r\n        <button \r\n        className={`${FlexCol} w-[160px] h-[170px] justify-center flex absolute right-10 top-10  text-darkbrown text-4xl font-bold font-Gmarket items-center gap-4`}\r\n        onClick={() => setIsModalOpen(true)}>\r\n          <img src={Bell} className={`w-[150px] h-[170px]`}/> \r\n          <p>직원 호출</p>\r\n        </button>\r\n      </div>\r\n      \r\n      <div className={`bg-darkbrown rounded-full text-center ml-12 mr-12 mt-8 pt-4 pb-2`}>\r\n        <p className={`font-Gmarket text-white text-[40px]`}>+버튼과 -버튼으로 수량을 정해보세요</p>\r\n      </div>\r\n\r\n    {enlargeState ===false ? (\r\n        <div className={`${FlexRow} w-full`}>\r\n          <div className={`${FlexCol} w-1/2 ml-8 mr-2`}>\r\n            \r\n            {/* 떡볶이 */}\r\n            <div className={`${FlexCol}`}>\r\n              <div className={`bg-darkred mt-10 mb-0 p-2 \r\n              font-Jeju text-white text-4xl text-center`}>\r\n                <p>떡볶이류</p>\r\n              </div>\r\n              {dummy.떡볶이류.map((item, index) => (\r\n              <div key={index} className={`${FlexRow} font-Jeju text-4xl bg-white \r\n              p-4 mt-0 border-b-2 border-black border-l-4 border-r-4 items-center text-center`}>\r\n                <div className={`w-[40%] m-0 p-0`}>\r\n                  <p>{item.menu}</p>\r\n                  <p className={`text-2xl`}>{item.detail}</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0`}>\r\n                  <p>{item.price}원</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0 ${FlexRow} justify-center gap-2 `}>\r\n                  <button className={`${itemCounts.떡볶이류[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                  onClick={() => updateItemCount('떡볶이류', item.menu, item.detail, itemCounts.떡볶이류[index] - 1)}>\r\n                    <p className={`mt-1`}>-</p>\r\n                  </button>\r\n                  <div className={`rounded-md border-2 border-black w-[80px] h-[50px] text-center`}>\r\n                    <p className={`mt-1`}>{itemCounts.떡볶이류[index]}</p>\r\n                  </div>\r\n                  <button className={`${itemCounts.떡볶이류[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                   onClick={() => updateItemCount('떡볶이류', item.menu, item.detail, itemCounts.떡볶이류[index] + 1)}>\r\n                    <p className={`mt-1`}>+</p>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              ))}\r\n            </div>\r\n            {/* 세트메뉴 */}\r\n            <div className={`${FlexCol}`}>\r\n              <div className={`bg-darkred mt-10 mb-0 p-2 \r\n              font-Jeju text-white text-4xl text-center`}>\r\n                <p>세트메뉴</p>\r\n              </div>\r\n              {dummy.세트메뉴.map((item, index) => (\r\n              <div key={index} className={`${FlexRow} font-Jeju text-4xl bg-white \r\n              p-4 mt-0 border-b-2 border-black border-l-4 border-r-4 items-center text-center`}>\r\n                <div className={`w-[40%] m-0 p-0`}>\r\n                  <p>{item.menu}</p>\r\n                  <p className={`text-2xl`}>{item.detail}</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0`}>\r\n                  <p>{item.price}원</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0 ${FlexRow} justify-center gap-2 `}>\r\n                  <button className={`${itemCounts.세트메뉴[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                  onClick={() => updateItemCount('세트메뉴', item.menu, item.detail, itemCounts.세트메뉴[index] - 1)}>\r\n                    <p className={`mt-1`}>-</p>\r\n                  </button>\r\n                  <div className={`rounded-md border-2 border-black w-[80px] h-[50px] text-center`}>\r\n                    <p className={`mt-1`}>{itemCounts.세트메뉴[index]}</p>\r\n                  </div>\r\n                  <button className={`${itemCounts.세트메뉴[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                   onClick={() => updateItemCount('세트메뉴', item.menu, item.detail, itemCounts.세트메뉴[index] + 1)}>\r\n                    <p className={`mt-1`}>+</p>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className={`${FlexCol} w-1/2 mr-8 ml-2`}>\r\n            {/* 사이드류 */}\r\n            <div className={`${FlexCol}`}>\r\n              <div className={`bg-darkred mt-10 mb-0 p-2 \r\n              font-Jeju text-white text-4xl text-center`}>\r\n                <p>사이드류</p>\r\n              </div>\r\n              {dummy.사이드류.map((item, index) => (\r\n              <div key={index} className={`${FlexRow} font-Jeju text-4xl bg-white \r\n              p-4 mt-0 border-b-2 border-black border-l-4 border-r-4 items-center text-center`}>\r\n                <div className={`w-[40%] m-0 p-0`}>\r\n                  <p>{item.menu}</p>\r\n                  <p className={`text-2xl`}>{item.detail}</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0`}>\r\n                  <p>{item.price}원</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0 ${FlexRow} justify-center gap-2 `}>\r\n                  <button className={`${itemCounts.사이드류[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                  onClick={() => updateItemCount('사이드류', item.menu, item.detail, itemCounts.사이드류[index] - 1)}>\r\n                    <p className={`mt-1`}>-</p>\r\n                  </button>\r\n                  <div className={`rounded-md border-2 border-black w-[80px] h-[50px] text-center`}>\r\n                    <p className={`mt-1`}>{itemCounts.사이드류[index]}</p>\r\n                  </div>\r\n                  <button className={`${itemCounts.사이드류[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                   onClick={() => updateItemCount('사이드류', item.menu, item.detail, itemCounts.사이드류[index] + 1)}>\r\n                    <p className={`mt-1`}>+</p>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n    ) : (\r\n        <div className={`${FlexRow} w-full`}>\r\n          <div className={`${FlexCol} w-full ml-8 mr-8`}>\r\n            {/* 떡볶이 */}\r\n            <div className={`${FlexCol}`}>\r\n              <div className={`bg-darkred mt-10 mb-0 p-2 \r\n              font-Jeju text-white text-4xl text-center`}>\r\n                <p>떡볶이류</p>\r\n              </div>\r\n              {dummy.떡볶이류.map((item, index) => (\r\n              <div key={index} className={`${FlexRow} font-Jeju text-4xl bg-white \r\n              p-4 mt-0 border-b-2 border-black border-l-4 border-r-4 items-center text-center`}>\r\n                <div className={`w-[40%] m-0 p-0`}>\r\n                  <p>{item.menu}</p>\r\n                  <p className={`text-2xl`}>{item.detail}</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0`}>\r\n                  <p>{item.price}원</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0 ${FlexRow} justify-center gap-2 `}>\r\n                  <button className={`${itemCounts.떡볶이류[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                  onClick={() => updateItemCount('떡볶이류', item.menu, item.detail, itemCounts.떡볶이류[index] - 1)}>\r\n                    <p className={`mt-1`}>-</p>\r\n                  </button>\r\n                  <div className={`rounded-md border-2 border-black w-[80px] h-[50px] text-center`}>\r\n                    <p className={`mt-1`}>{itemCounts.떡볶이류[index]}</p>\r\n                  </div>\r\n                  <button className={`${itemCounts.떡볶이류[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                   onClick={() => updateItemCount('떡볶이류', item.menu, item.detail, itemCounts.떡볶이류[index] + 1)}>\r\n                    <p className={`mt-1`}>+</p>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              ))}\r\n            </div>\r\n            {/* 세트메뉴 */}\r\n            <div className={`${FlexCol}`}>\r\n              <div className={`bg-darkred mt-10 mb-0 p-2 \r\n              font-Jeju text-white text-4xl text-center`}>\r\n                <p>세트메뉴</p>\r\n              </div>\r\n              {dummy.세트메뉴.map((item, index) => (\r\n              <div key={index} className={`${FlexRow} font-Jeju text-4xl bg-white \r\n              p-4 mt-0 border-b-2 border-black border-l-4 border-r-4 items-center text-center`}>\r\n                <div className={`w-[40%] m-0 p-0`}>\r\n                  <p>{item.menu}</p>\r\n                  <p className={`text-2xl`}>{item.detail}</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0`}>\r\n                  <p>{item.price}원</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0 ${FlexRow} justify-center gap-2 `}>\r\n                  <button className={`${itemCounts.세트메뉴[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                  onClick={() => updateItemCount('세트메뉴', item.menu, item.detail, itemCounts.세트메뉴[index] - 1)}>\r\n                    <p className={`mt-1`}>-</p>\r\n                  </button>\r\n                  <div className={`rounded-md border-2 border-black w-[80px] h-[50px] text-center`}>\r\n                    <p className={`mt-1`}>{itemCounts.세트메뉴[index]}</p>\r\n                  </div>\r\n                  <button className={`${itemCounts.세트메뉴[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                   onClick={() => updateItemCount('세트메뉴', item.menu, item.detail, itemCounts.세트메뉴[index] + 1)}>\r\n                    <p className={`mt-1`}>+</p>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              ))}\r\n            </div>\r\n            {/* 사이드류 */}\r\n            <div className={`${FlexCol}`}>\r\n              <div className={`bg-darkred mt-10 mb-0 p-2 \r\n              font-Jeju text-white text-4xl text-center`}>\r\n                <p>사이드류</p>\r\n              </div>\r\n              {dummy.사이드류.map((item, index) => (\r\n              <div key={index} className={`${FlexRow} font-Jeju text-4xl bg-white \r\n              p-4 mt-0 border-b-2 border-black border-l-4 border-r-4 items-center text-center`}>\r\n                <div className={`w-[40%] m-0 p-0`}>\r\n                  <p>{item.menu}</p>\r\n                  <p className={`text-2xl`}>{item.detail}</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0`}>\r\n                  <p>{item.price}원</p>\r\n                </div>\r\n                <div className={`w-[30%] m-0 p-0 ${FlexRow} justify-center gap-2 `}>\r\n                  <button className={`${itemCounts.사이드류[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                  onClick={() => updateItemCount('사이드류', item.menu, item.detail, itemCounts.사이드류[index] - 1)}>\r\n                    <p className={`mt-1`}>-</p>\r\n                  </button>\r\n                  <div className={`rounded-md border-2 border-black w-[80px] h-[50px] text-center`}>\r\n                    <p className={`mt-1`}>{itemCounts.사이드류[index]}</p>\r\n                  </div>\r\n                  <button className={`${itemCounts.사이드류[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n                   onClick={() => updateItemCount('사이드류', item.menu, item.detail, itemCounts.사이드류[index] + 1)}>\r\n                    <p className={`mt-1`}>+</p>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )}\r\n    \r\n\r\n    <div className={`${FlexCol} mt-4 ml-12 mr-12 pt-2 pb-4`}>\r\n      <p className={'font-Jeju text-red text-[30px]'}>신경안쓰셔도 돼요 확인용입니다</p>\r\n          {orderedItems.map((item, index) => (\r\n            <div key={index} className={`${FlexRow} justify-between`}>\r\n              <p className={`font-Jeju text-[24px]`}>\r\n                {item.menu}{item.detail} - {item.price * item.count}원\r\n              </p>\r\n              <p className={`font-Jeju text-[24px]`}>수량: {item.count}</p>\r\n            </div>\r\n          ))}\r\n    </div>\r\n    </Fade>\r\n\r\n    <div className={`${FlexCol} sticky bottom-0 bg-beige `}>\r\n      \r\n      <div className={`bg-white rounded-tl-full rounded-tr-full rounded-br-full text-center mt-10 ml-12 mr-12 pt-4 pb-2`}>\r\n        <p className={`font-Jeju text-[40px]`}>총 {totalPrice}원입니다. 결제하시겠습니까?</p>\r\n      </div>\r\n\r\n      <div className={`${FlexRow} justify-center mt-10 mb-10`}>\r\n        <button \r\n          className={`${isButtonEnabled ? 'bg-red' : 'bg-gray-400'} w-2/5 h-[200px] rounded-[30px] pt-8`}\r\n          onClick={() => isButtonEnabled && setIsModalFirstOpen(true)}\r\n          disabled={!isButtonEnabled}>\r\n            <p className={'font-Gangwon text-[80px] text-white'}>결제하기</p>\r\n        </button>\r\n        <button \r\n        className={`${FlexCol} w-[170px] justify-center absolute right-12 text-darkbrown text-4xl font-bold font-Gmarket items-center`}\r\n        onClick={handleEnlargeClick}>\r\n          <img src={Enlarge}/>\r\n          <p>{enlargeState === true ? \"화면 축소\":\"화면 확대\"}</p>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <Modal\r\n      isOpen={isModalOpen} \r\n      onRequestClose={() => setIsModalOpen(false)} \r\n      className=\"outline-none flex flex-col text-center text-6xl font-Gangwon bg-whiteandgray rounded-[40px] w-[800px] h-[500px]\r\n      fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-2/3\"\r\n      style={{\r\n        overlay: {\r\n          backgroundColor: \"rgba(0, 0, 0, 0.7)\", \r\n          display: \"grid\",\r\n          placeItems: \"center\",\r\n        },\r\n      }}>\r\n      <div className=\"flex flex-col justify-center h-full items-center\">\r\n        <img src={ModalTop} className={`w-[400px] absolute -top-24`}/>\r\n        <p>직원을 호출했습니다<br/> 잠시만 기다려주세요</p>\r\n      </div>\r\n    </Modal>\r\n\r\n    \r\n    <Modal\r\n      isOpen={isModalFirstOpen} \r\n      onRequestClose={() => setIsModalFirstOpen(false)} \r\n      className=\"outline-none flex flex-col items-center text-center text-6xl font-Gangwon bg-whiteandgray rounded-[40px] w-[800px] h-[800px]\r\n      fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-2/3 text-white\"\r\n      style={{\r\n        overlay: {\r\n          backgroundColor: \"rgba(0, 0, 0, 0.7)\", \r\n          display: \"grid\",\r\n          placeItems: \"center\",\r\n        },\r\n      }}>\r\n      <img src={ModalTop} className={`w-[400px] absolute -top-24`}/>\r\n      <div className=\"flex gap-8 justify-center h-[1000px] w-full items-center pt-16 pl-8 pr-8 \">\r\n        <button \r\n          onClick={() => setIsModalTwoOpen(true)}\r\n          className={`h-full w-full rounded-[40px] bg-mint/70`}>\r\n          포장하기\r\n        </button>\r\n        <button \r\n          onClick={() => setIsModalTwoOpen(true)}\r\n          className={`h-full w-full rounded-[40px] bg-mint/70`}>\r\n          매장식사\r\n        </button>\r\n      </div>\r\n      <div className=\"flex flex-col justify-center h-[300px] items-center h-full w-full p-8\">\r\n        <button \r\n          onClick={() => setIsModalFirstOpen(false)}\r\n          className={`h-full w-full rounded-[40px] bg-white text-mint/70`}>\r\n          뒤로가기\r\n        </button>\r\n      </div>\r\n    </Modal>\r\n\r\n    <Modal\r\n      isOpen={isModalTwoOpen} \r\n      onRequestClose={() => setIsModalTwoOpen(false)} \r\n      className=\"outline-none flex flex-col items-center text-center text-6xl font-Gangwon bg-whiteandgray rounded-[40px] w-[800px] h-[800px]\r\n      fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-2/3 text-white\"\r\n      style={{\r\n        overlay: {\r\n          backgroundColor: \"rgba(0, 0, 0, 0)\", \r\n          display: \"grid\",\r\n          placeItems: \"center\",\r\n        },\r\n      }} >\r\n      <img src={ModalTop} className={`w-[400px] absolute -top-24`}/>\r\n      <div className=\"flex gap-8 justify-center h-[1000px] w-full items-center pt-16 pl-8 pr-8 \">\r\n        <button \r\n          //onClick={() => handleDoneClick()}\r\n          className={`h-full w-full rounded-[40px] bg-mint/70`}>\r\n          카드\r\n        </button>\r\n        <button \r\n          //onClick={() => handleDoneClick()}\r\n          className={`h-full w-full rounded-[40px] bg-mint/70`}>\r\n          현금\r\n        </button>\r\n      </div>\r\n      <div className=\"flex flex-col justify-center h-[300px] items-center h-full w-full p-8\">\r\n        <button \r\n          onClick={() => setIsModalTwoOpen(false)}\r\n          className={`h-full w-full rounded-[40px] bg-white text-mint/70`}>\r\n          뒤로가기\r\n        </button>\r\n      </div>\r\n    </Modal>\r\n\r\n\r\n    </div>\r\n  \r\n  )\r\n}\r\n",{"ruleId":"59","severity":1,"message":"60","line":1,"column":16,"nodeType":"61","messageId":"62","endLine":1,"endColumn":24},{"ruleId":"59","severity":1,"message":"63","line":2,"column":19,"nodeType":"61","messageId":"62","endLine":2,"endColumn":27},{"ruleId":"59","severity":1,"message":"64","line":2,"column":29,"nodeType":"61","messageId":"62","endLine":2,"endColumn":36},{"ruleId":"59","severity":1,"message":"65","line":2,"column":38,"nodeType":"61","messageId":"62","endLine":2,"endColumn":45},{"ruleId":"59","severity":1,"message":"66","line":3,"column":16,"nodeType":"61","messageId":"62","endLine":3,"endColumn":21},{"ruleId":"59","severity":1,"message":"67","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":13},{"ruleId":"59","severity":1,"message":"68","line":1,"column":37,"nodeType":"61","messageId":"62","endLine":1,"endColumn":43},{"ruleId":"59","severity":1,"message":"63","line":2,"column":19,"nodeType":"61","messageId":"62","endLine":2,"endColumn":27},{"ruleId":"59","severity":1,"message":"64","line":2,"column":29,"nodeType":"61","messageId":"62","endLine":2,"endColumn":36},{"ruleId":"59","severity":1,"message":"66","line":3,"column":16,"nodeType":"61","messageId":"62","endLine":3,"endColumn":21},{"ruleId":"59","severity":1,"message":"67","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":13},{"ruleId":"59","severity":1,"message":"69","line":20,"column":9,"nodeType":"61","messageId":"62","endLine":20,"endColumn":24},{"ruleId":"70","severity":1,"message":"71","line":100,"column":6,"nodeType":"72","endLine":100,"endColumn":20,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":131,"column":11,"nodeType":"76","endLine":131,"endColumn":41},{"ruleId":"74","severity":1,"message":"75","line":136,"column":11,"nodeType":"76","endLine":136,"endColumn":62},{"ruleId":"74","severity":1,"message":"75","line":382,"column":11,"nodeType":"76","endLine":382,"endColumn":31},{"ruleId":"74","severity":1,"message":"75","line":401,"column":9,"nodeType":"76","endLine":401,"endColumn":71},{"ruleId":"74","severity":1,"message":"75","line":419,"column":7,"nodeType":"76","endLine":419,"endColumn":69},{"ruleId":"74","severity":1,"message":"75","line":453,"column":7,"nodeType":"76","endLine":453,"endColumn":69},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'PaddingX' is defined but never used.","'Padding' is defined but never used.","'FlexRow' is defined but never used.","'Slide' is defined but never used.","'Pulse' is defined but never used.","'useRef' is defined but never used.","'handleDoneClick' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateTotalPrice'. Either include it or remove the dependency array.","ArrayExpression",["77"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"78","fix":"79"},"Update the dependencies array to be: [orderedItems, updateTotalPrice]",{"range":"80","text":"81"},[3005,3019],"[orderedItems, updateTotalPrice]"]