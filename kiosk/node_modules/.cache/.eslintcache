[{"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\index.js":"1","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\reportWebVitals.js":"2","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\App.jsx":"3","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Order.jsx":"4","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Error.jsx":"5","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Home.jsx":"6","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\constants\\style.js":"7","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\context\\context.js":"8","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Done.jsx":"9"},{"size":824,"mtime":1690974739796,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1690192016021,"results":"12","hashOfConfig":"11"},{"size":188,"mtime":1690595063700,"results":"13","hashOfConfig":"11"},{"size":15623,"mtime":1691047170138,"results":"14","hashOfConfig":"11"},{"size":151,"mtime":1690443247650,"results":"15","hashOfConfig":"11"},{"size":3060,"mtime":1691047487966,"results":"16","hashOfConfig":"11"},{"size":147,"mtime":1690433043958,"results":"17","hashOfConfig":"11"},{"size":124,"mtime":1690972245722,"results":"18","hashOfConfig":"11"},{"size":3751,"mtime":1691047483134,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1m4339a",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"23"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\index.js",[],[],[],"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\reportWebVitals.js",[],[],"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\App.jsx",[],[],"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Order.jsx",["51","52","53","54","55","56","57","58","59","60","61"],[],"import {React, useState, useEffect, useRef} from 'react'\r\nimport axios from 'axios';\r\nimport { FlexCol, PaddingX, Padding, FlexRow } from '../constants/style'\r\nimport { Fade, Slide } from 'react-reveal';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Pulse from 'react-reveal/Pulse';\r\nimport Bell from '../assets/images/Bell.png';\r\nimport Enlarge from '../assets/images/Enlarge.png';\r\nimport dummy_product from '../data/product.json';\r\nimport Modal from 'react-modal';\r\nimport ModalTop from '../assets/images/ModalTop.png'\r\nimport { BASEURL } from '../context/context';\r\nimport dummy_category from '../data/category.json';\r\n\r\n\r\nexport default function Order() {\r\n  //페이지 전환 useNavigate()(vs Link)\r\n  const navigate = useNavigate();\r\n  const handleClick = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  //Modal 상태 관리 useState()\r\n  //useEffect() \r\n  // 1번째인자 -> sideeffect를 정의하는 콜백함수, \r\n  //콜백함수는 컴포넌트가 마운트되었을때(처음 렌더링될 때) 실행되며, 컴포넌트가 업데이트될 때마다 실행된다. \r\n  // 2번째인자 -> 의존성배열로서, 컴포넌트의 특정 상태나 프롭스가 변경되었을 때에만 콜백함수를 실행하도록 설정할수 있다.\r\n  const [isModalOpen, setIsModalOpen] = useState(false); \r\n  const [isModalFirstOpen, setIsModalFirstOpen] = useState(false);\r\n  const [isModalTwoOpen, setIsModalTwoOpen] = useState(false);\r\n  useEffect(() => {\r\n    if (isModalOpen) {\r\n      const timer = setTimeout(() => {\r\n        setIsModalOpen(false);\r\n      }, 5000); \r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [isModalOpen]);\r\n\r\n  //돋보기 아이콘 useState()\r\n  const [enlargeState, setEnlargeState] = useState(false);\r\n  const handleEnlargeClick = () => {\r\n    setEnlargeState(!enlargeState);\r\n  };\r\n\r\n  // 포장/매장\r\n  const [isTakeout, setIstakeout] = useState();\r\n  // 카드/현금\r\n  const [payment, setPayment] = useState();\r\n\r\n  //API \r\n  useEffect(() => {\r\n    axios\r\n      .get(`${BASEURL}/product/`)\r\n      .then((res) => console.log(res.body));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${BASEURL}/category/`)\r\n      .then((res) => console.log(res.body));\r\n  }, []);\r\n\r\n  const categoryList = dummy_category;\r\n  const productList = dummy_product; \r\n  // category.json 복사\r\n  const categoryNameList = categoryList.map((category)=>(category.category_name))\r\n  // category별 product 리스트\r\n  const categoryProductList = categoryList.map((category) =>\r\n    productList.filter((product) => product.category === category.id)\r\n  );\r\n\r\n  // category별 수량\r\n  const initialItemCount = {};\r\n  categoryList.forEach((category)=>{\r\n    const categoryProductList = productList.filter((product)=> product.category === category.id);\r\n    const initialCategoryItemCount = categoryProductList.map(()=>0);\r\n    initialItemCount[category.category_name] = initialCategoryItemCount;\r\n  })\r\n  const [itemCounts, setItemCounts] = useState(initialItemCount);\r\n  \r\n  // 총가격\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n  // 주문메뉴\r\n  const [orderedItems, setOrderedItems] = useState([]);\r\n\r\n  const updateItemCount = (categoryProductList, categoryName, itemIndex, count, categoryItemsCountList) => {\r\n    // 제품을 categoryProductList에서 가져옵니다.\r\n    const product = categoryProductList[itemIndex];\r\n  \r\n    // 새로운 총 가격을 계산할 변수를 선언합니다.\r\n    let newTotalPrice;\r\n  \r\n    // count가 양수인 경우 (버튼이 + 버튼일 때)\r\n    if (count >= 0) {\r\n      // itemCounts 상태를 업데이트하여 선택한 항목의 수량을 업데이트합니다.\r\n      setItemCounts((prevCounts) => ({\r\n        ...prevCounts,\r\n        [categoryName]: prevCounts[categoryName].map((itemCount, index) =>\r\n          index === itemIndex ? count : itemCount\r\n        ),\r\n      }));\r\n  \r\n      // 새로운 총 가격을 계산하여 totalPrice 상태를 업데이트합니다.\r\n      newTotalPrice = totalPrice + (count - categoryItemsCountList[itemIndex]) * product.price;\r\n  \r\n      // 선택한 항목에 따라 orderedItems 상태를 업데이트합니다.\r\n      if (count > 0) {\r\n        setOrderedItems((prevItems) => {\r\n          const existingItemIndex = prevItems.findIndex((item) => item.id === product.id);\r\n          if (existingItemIndex !== -1) {\r\n            // 항목이 이미 존재하는 경우, 수량을 업데이트합니다.\r\n            const updatedItems = [...prevItems];\r\n            updatedItems[existingItemIndex] = { ...product, count };\r\n            return updatedItems;\r\n          } else {\r\n            // 항목이 새로운 경우, orderedItems에 추가합니다.\r\n            return [...prevItems, { ...product, count }];\r\n          }\r\n        });\r\n      } else {\r\n        // 수량이 0인 경우, orderedItems에서 항목을 제거합니다.\r\n        setOrderedItems((prevItems) => prevItems.filter((item) => item.id !== product.id));\r\n      }\r\n    } else {\r\n      // count가 음수인 경우 (버튼이 - 버튼일 때)\r\n      // 여기서는 수량을 업데이트하지 않고, totalPrice에서 이전 수량의 가격을 빼야합니다.\r\n      // 따라서 count에 음수 값을 취해서 이전 수량을 되돌리고, totalPrice에서는 이전 수량의 가격을 빼야합니다.\r\n      setItemCounts((prevCounts) => ({\r\n        ...prevCounts,\r\n        [categoryName]: prevCounts[categoryName].map((itemCount, index) =>\r\n          index === itemIndex ? Math.max(0, count) : itemCount\r\n        ),\r\n      }));\r\n      newTotalPrice = totalPrice - (categoryItemsCountList[itemIndex] * product.price);\r\n    }\r\n  \r\n    // totalPrice 상태를 업데이트합니다.\r\n    setTotalPrice(newTotalPrice);\r\n  };\r\n\r\n  //orderItems에 따른 버튼 활성화\r\n  const isButtonEnabled = orderedItems.length > 0;\r\n\r\n\r\n  console.log(orderedItems);\r\n  //API\r\n  const handleDoneClick = () => {\r\n    if (payment === \"카드\" || payment === \"현금\"){\r\n      axios.post(`${BASEURL}/product-order/`,{\r\n        payment,\r\n        isTakeout,\r\n        totalPrice,\r\n        orderedItems,\r\n      })\r\n      .then((response) => {\r\n        console.log(\"주문 성공\", response.body)\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"주문 에러\", error)\r\n      });\r\n    }\r\n    navigate('/done');\r\n  }\r\n\r\n  return (\r\n    <div className={`${FlexCol} bg-beige relative z-0 h-full`} >\r\n    <Fade>\r\n      <div className={`${FlexRow} m-10`}>\r\n        <button onClick={() => handleClick()} className={`w-[30%]`}>\r\n          <img src='/images/logo.png' />\r\n        </button>\r\n        <button \r\n        className={`${FlexCol} w-[160px] h-[170px] justify-center flex absolute right-10 top-10  text-darkbrown text-4xl font-bold font-Gmarket items-center gap-4`}\r\n        onClick={() => setIsModalOpen(true)}>\r\n          <img src={Bell} className={`w-[150px] h-[170px]`}/> \r\n          <p>직원 호출</p>\r\n        </button>\r\n      </div>\r\n      \r\n      \r\n      <div className={`bg-darkbrown rounded-full text-center ml-12 mr-12 mt-8 pt-4 pb-2`}>\r\n        <p className={`font-Gmarket text-white text-[40px]`}>+버튼과 -버튼으로 수량을 정해보세요</p>\r\n      </div>\r\n\r\n    {enlargeState ===false ? (\r\n        <div className={`${FlexRow} w-full`}>\r\n          <div className={`${FlexCol} w-1/2 ml-8 mr-2`}>\r\n          <Table\r\n            categoryProductList={categoryProductList[0]}\r\n            categoryName={categoryNameList[0]}\r\n            categoryItemsCountList={itemCounts[categoryNameList[0]]} \r\n        \r\n            updateItemCount={updateItemCount}\r\n          />\r\n          <Table\r\n            categoryProductList={categoryProductList[2]}\r\n            categoryName={categoryNameList[2]}\r\n            categoryItemsCountList={itemCounts[categoryNameList[2]]} \r\n            updateItemCount={updateItemCount}\r\n          />\r\n          </div>\r\n          <div className={`${FlexCol} w-1/2 mr-8 ml-2`}>\r\n          <Table\r\n              categoryProductList={categoryProductList[1]}\r\n              categoryName={categoryNameList[1]}\r\n              categoryItemsCountList={itemCounts[categoryNameList[1]]} \r\n              updateItemCount={updateItemCount}\r\n            />\r\n          </div>\r\n        </div>\r\n    ) : (\r\n        <div className={`${FlexRow} w-full`}>\r\n          <div className={`${FlexCol} w-full ml-8 mr-8`}>\r\n          <Table\r\n            categoryProductList={categoryProductList[0]}\r\n            categoryName={categoryNameList[0]}\r\n            categoryItemsCountList={itemCounts[categoryNameList[0]]} \r\n            updateItemCount={updateItemCount}\r\n          />\r\n          <Table\r\n            categoryProductList={categoryProductList[2]}\r\n            categoryName={categoryNameList[2]}\r\n            categoryItemsCountList={itemCounts[categoryNameList[2]]}\r\n            updateItemCount={updateItemCount}\r\n          />\r\n          <Table\r\n            categoryProductList={categoryProductList[1]}\r\n            categoryName={categoryNameList[1]}\r\n            categoryItemsCountList={itemCounts[categoryNameList[1]]} \r\n            updateItemCount={updateItemCount}\r\n          />\r\n          </div>\r\n        </div>\r\n    )}\r\n    </Fade>\r\n\r\n    <div className={`${FlexCol} sticky bottom-0 bg-beige `}>\r\n      \r\n      <div className={`bg-white rounded-tl-full rounded-tr-full rounded-br-full text-center mt-10 ml-12 mr-12 pt-4 pb-2`}>\r\n        <p className={`font-Jeju text-[40px]`}>총 {totalPrice}원입니다. 결제하시겠습니까?</p>\r\n      </div>\r\n\r\n      <div className={`${FlexRow} justify-center mt-10 mb-10`}>\r\n        <button \r\n          className={`${isButtonEnabled ? 'bg-red' : 'bg-gray-400'} w-2/5 h-[200px] rounded-[30px] pt-8`}\r\n          onClick={() => isButtonEnabled && setIsModalFirstOpen(true)}\r\n          disabled={!isButtonEnabled}>\r\n            <p className={'font-Gangwon text-[80px] text-white'}>결제하기</p>\r\n        </button>\r\n        <button \r\n        className={`${FlexCol} w-[170px] justify-center absolute right-12 text-darkbrown text-4xl font-bold font-Gmarket items-center`}\r\n        onClick={handleEnlargeClick}>\r\n          <img src={Enlarge}/>\r\n          <p>{enlargeState === true ? \"화면 축소\":\"화면 확대\"}</p>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <Modal\r\n      isOpen={isModalOpen} \r\n      onRequestClose={() => setIsModalOpen(false)} \r\n      className=\"outline-none flex flex-col text-center text-6xl font-Gangwon bg-whiteandgray rounded-[40px] w-[800px] h-[500px]\r\n      fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-2/3\"\r\n      style={{\r\n        overlay: {\r\n          backgroundColor: \"rgba(0, 0, 0, 0.7)\", \r\n          display: \"grid\",\r\n          placeItems: \"center\",\r\n        },\r\n      }}>\r\n      <div className=\"flex flex-col justify-center h-full items-center\">\r\n        <img src={ModalTop} className={`w-[400px] absolute -top-24`}/>\r\n        <p>직원을 호출했습니다<br/> 잠시만 기다려주세요</p>\r\n      </div>\r\n    </Modal>\r\n\r\n    \r\n    <Modal\r\n      isOpen={isModalFirstOpen} \r\n      onRequestClose={() => setIsModalFirstOpen(false)} \r\n      className=\"outline-none flex flex-col items-center text-center text-6xl font-Gangwon bg-whiteandgray rounded-[40px] w-[800px] h-[800px]\r\n      fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-2/3 text-white\"\r\n      style={{\r\n        overlay: {\r\n          backgroundColor: \"rgba(0, 0, 0, 0.7)\", \r\n          display: \"grid\",\r\n          placeItems: \"center\",\r\n        },\r\n      }}>\r\n      <img src={ModalTop} className={`w-[400px] absolute -top-24`}/>\r\n      <div className=\"flex gap-8 justify-center h-[1000px] w-full items-center pt-16 pl-8 pr-8 \">\r\n        <button \r\n          onClick={() => {setIsModalTwoOpen(true) && setIstakeout(true)}}\r\n          className={`h-full w-full rounded-[40px] bg-mint/70`}>\r\n          포장하기\r\n        </button>\r\n        <button \r\n          onClick={() => {setIsModalTwoOpen(true) && setIstakeout(false)}}\r\n          className={`h-full w-full rounded-[40px] bg-mint/70`}>\r\n          매장식사\r\n        </button>\r\n      </div>\r\n      <div className=\"flex flex-col justify-center h-[300px] items-center h-full w-full p-8\">\r\n        <button \r\n          onClick={() => setIsModalFirstOpen(false)}\r\n          className={`h-full w-full rounded-[40px] bg-white text-mint/70`}>\r\n          뒤로가기\r\n        </button>\r\n      </div>\r\n    </Modal>\r\n\r\n    <Modal\r\n      isOpen={isModalTwoOpen} \r\n      onRequestClose={() => setIsModalTwoOpen(false)} \r\n      className=\"outline-none flex flex-col items-center text-center text-6xl font-Gangwon bg-whiteandgray rounded-[40px] w-[800px] h-[800px]\r\n      fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-2/3 text-white\"\r\n      style={{\r\n        overlay: {\r\n          backgroundColor: \"rgba(0, 0, 0, 0)\", \r\n          display: \"grid\",\r\n          placeItems: \"center\",\r\n        },\r\n      }} >\r\n      <img src={ModalTop} className={`w-[400px] absolute -top-24`}/>\r\n      <div className=\"flex gap-8 justify-center h-[1000px] w-full items-center pt-16 pl-8 pr-8 \">\r\n        <button \r\n          onClick={() => {handleDoneClick() && setPayment(\"카드\") }}\r\n          className={`h-full w-full rounded-[40px] bg-mint/70`}>\r\n          카드\r\n        </button>\r\n        <button \r\n          onClick={() => {handleDoneClick() && setPayment(\"현금\") }}\r\n          className={`h-full w-full rounded-[40px] bg-mint/70`}>\r\n          현금\r\n        </button>\r\n      </div>\r\n      <div className=\"flex flex-col justify-center h-[300px] items-center h-full w-full p-8\">\r\n        <button \r\n          onClick={() => setIsModalTwoOpen(false)}\r\n          className={`h-full w-full rounded-[40px] bg-white text-mint/70`}>\r\n          뒤로가기\r\n        </button>\r\n      </div>\r\n    </Modal>\r\n\r\n\r\n    </div>\r\n  \r\n  )\r\n}\r\n\r\n\r\nfunction Table({categoryProductList, categoryName, categoryItemsCountList, updateItemCount}) {\r\n\r\n  return(\r\n    <div className={`${FlexCol}`}>\r\n      <div className={`bg-darkred mt-10 mb-0 p-2 \r\n        font-Jeju text-white text-4xl text-center`}>\r\n        <p>{categoryName}</p>\r\n      </div>\r\n\r\n      {categoryProductList.map((item, index) => (\r\n      <div key={index} className={`${FlexRow} font-Jeju text-4xl bg-white \r\n        p-4 mt-0 border-b-2 border-black border-l-4 border-r-4 items-center text-center`}>\r\n        <div className={`w-[40%] m-0 p-0`}>\r\n          <p>{item.product_name}</p>\r\n          <p className={`text-2xl`}>{item.product_detail}</p>\r\n        </div>\r\n        <div className={`w-[30%] m-0 p-0`}>\r\n          <p>{item.price}원</p>\r\n        </div>\r\n        <div className={`w-[30%] m-0 p-0 ${FlexRow} justify-center gap-2 `}>\r\n          <button className={`${categoryItemsCountList[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n            onClick={() => updateItemCount(categoryProductList, categoryName, index, categoryItemsCountList[index] - 1, categoryItemsCountList)}\r\n            >\r\n            <p className={`mt-1`}>-</p>\r\n          </button>\r\n          <div className={`rounded-md border-2 border-black w-[80px] h-[50px] text-center`}>\r\n            <p className={`mt-1`}>{categoryItemsCountList[index]}</p>\r\n          </div>\r\n          <button className={`${categoryItemsCountList[index]>0? 'bg-red' : 'bg-gray-400'} rounded-full w-[50px] h-[50px] text-white`}\r\n           onClick={() =>  updateItemCount(categoryProductList, categoryName, index, categoryItemsCountList[index] + 1, categoryItemsCountList)}\r\n           >\r\n            <p className={`mt-1`}>+</p>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Error.jsx",[],[],"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Home.jsx",["62","63","64","65","66","67"],[],"import {React, useState} from 'react'\r\nimport { FlexCol, PaddingX, Padding, FlexRow } from '../constants/style'\r\nimport { Fade, Slide, Zoom } from 'react-reveal';\r\nimport Shake from 'react-reveal/Shake';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function Home() {\r\n    const navigate = useNavigate();\r\n    const handleOrderClick = () => {\r\n      navigate('/order');\r\n    };\r\n\r\n  return (\r\n    //bg-background에서 background는 tailwind.config.js에서 설정했습니다\r\n    //tailwindcss에 속성을 어떻게 줄 수 있는지는 https://tailwindcss.com/docs/overflow#class-reference 사이트에 있습니다\r\n    //font-Gangwon은 index.css에 정의했습니다\r\n    //Fade 등 위에 import된 효과들은 react-reveal로, 애니메이션 효과입니다\r\n    <div className={`${FlexCol} bg-brown relative z-0 h-screen`}>\r\n      <img src={'../images/bread.png'}></img>\r\n      <Zoom>\r\n        <div className={'font-Gmarket text-ivory flex mt-5 justify-center items-center'}>\r\n          <h1 className={'text-[48px] text-center font-light whitespace-nowrap mr-4'}>저희 키오스크의 메뉴판으로</h1>\r\n          <h1 className={'text-[48px] text-center font-semibold'}>쉽게 주문해보세요 !</h1>\r\n        </div>\r\n      </Zoom>\r\n      <div className={'flex justify-center'}>\r\n        <hr className={'w-4/5 mt-5 border-ivory border-2 rounded-full mb-20'}></hr>\r\n      </div>\r\n      <div className={'bg-cover bg-center flex'}>\r\n        <img className={'mt-6 ml-20 w-80 h-96 transform scale-x-[-1]'} src={'../images/deco.png'} alt=\"deco\"></img>\r\n        <img className={'absolute inset-0 mt-96 ml-96 w-2/5 h-max'} src={'../images/leaf.png'} alt=\"leaf\"></img>\r\n        <Shake>\r\n          <img className={'mt-80 ml-36 z-10 w-36 h-max'} src={'../images/bell.png'} alt=\"bell\"></img>\r\n        </Shake>\r\n        <img className={'mt-6 ml-48 w-80 h-96'} src={'../images/deco.png'} alt=\"deco\"></img>\r\n      </div>\r\n      <div className={`flex justify-center mt-6 mb-96 z-10`}>\r\n        <img src={'/images/logo.png'} className={`w-3/4 max-w-full`} alt=\"logo\"/>\r\n      </div>\r\n      <div>\r\n        <img className={'absolute inset-0 mt-auto mb-8 w-3/5 -z-50'} src={'../images/spoon.png'} alt=\"spoon\"/>\r\n      </div>\r\n      <div>\r\n        <img className={'absolute inset-0 mt-auto mb-36 w-80 ml-auto'} src={'../images/pizza.png'} alt=\"spoon\"/>\r\n      </div>\r\n      <div className={'flex justify-center'}>\r\n        <hr className={'w-4/5 mt-40 border-ivory border-2 rounded-full mb-20 z-10'}></hr>\r\n      </div>\r\n      <div className={`${FlexRow} flex justify-center items-center`}>\r\n          <button \r\n            className={`mt-16 bg-yellow w-2/5 h-[200px] rounded-[30px] shadow-2xl`}\r\n            onClick={() => handleOrderClick()}>\r\n              <h1 className={'font-Gangwon text-[100px] text-white mt-12'}>주문하기</h1>\r\n          </button>\r\n      </div>\r\n      <div>\r\n        <img className={'absolute inset-0 mt-auto ml-auto mr-32 w-3/5 -z-50'} src={'../images/pizza2.png'} alt=\"spoon\"/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\constants\\style.js",[],[],"C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\context\\context.js",["68"],[],"import axios from \"axios\";\r\n\r\nexport const BASEURL = \"https://port-0-kiosk-back-3prof2llkqren7j.sel4.cloudtype.app/api\";\r\n\r\n","C:\\Users\\USER\\OneDrive\\Desktop\\likelion\\LIKELION_HACKATHON\\kiosk\\src\\pages\\Done.jsx",["69","70","71","72","73"],[],{"ruleId":"74","severity":1,"message":"75","line":1,"column":37,"nodeType":"76","messageId":"77","endLine":1,"endColumn":43},{"ruleId":"74","severity":1,"message":"78","line":3,"column":19,"nodeType":"76","messageId":"77","endLine":3,"endColumn":27},{"ruleId":"74","severity":1,"message":"79","line":3,"column":29,"nodeType":"76","messageId":"77","endLine":3,"endColumn":36},{"ruleId":"74","severity":1,"message":"80","line":4,"column":16,"nodeType":"76","messageId":"77","endLine":4,"endColumn":21},{"ruleId":"74","severity":1,"message":"81","line":6,"column":8,"nodeType":"76","messageId":"77","endLine":6,"endColumn":13},{"ruleId":"82","severity":1,"message":"83","line":172,"column":11,"nodeType":"84","endLine":172,"endColumn":41},{"ruleId":"82","severity":1,"message":"83","line":177,"column":11,"nodeType":"84","endLine":177,"endColumn":62},{"ruleId":"82","severity":1,"message":"83","line":255,"column":11,"nodeType":"84","endLine":255,"endColumn":31},{"ruleId":"82","severity":1,"message":"83","line":274,"column":9,"nodeType":"84","endLine":274,"endColumn":71},{"ruleId":"82","severity":1,"message":"83","line":292,"column":7,"nodeType":"84","endLine":292,"endColumn":69},{"ruleId":"82","severity":1,"message":"83","line":326,"column":7,"nodeType":"84","endLine":326,"endColumn":69},{"ruleId":"74","severity":1,"message":"85","line":1,"column":16,"nodeType":"76","messageId":"77","endLine":1,"endColumn":24},{"ruleId":"74","severity":1,"message":"78","line":2,"column":19,"nodeType":"76","messageId":"77","endLine":2,"endColumn":27},{"ruleId":"74","severity":1,"message":"79","line":2,"column":29,"nodeType":"76","messageId":"77","endLine":2,"endColumn":36},{"ruleId":"74","severity":1,"message":"86","line":3,"column":10,"nodeType":"76","messageId":"77","endLine":3,"endColumn":14},{"ruleId":"74","severity":1,"message":"80","line":3,"column":16,"nodeType":"76","messageId":"77","endLine":3,"endColumn":21},{"ruleId":"82","severity":1,"message":"83","line":19,"column":7,"nodeType":"84","endLine":19,"endColumn":40},{"ruleId":"74","severity":1,"message":"87","line":1,"column":8,"nodeType":"76","messageId":"77","endLine":1,"endColumn":13},{"ruleId":"74","severity":1,"message":"78","line":2,"column":19,"nodeType":"76","messageId":"77","endLine":2,"endColumn":27},{"ruleId":"74","severity":1,"message":"79","line":2,"column":29,"nodeType":"76","messageId":"77","endLine":2,"endColumn":36},{"ruleId":"74","severity":1,"message":"88","line":2,"column":47,"nodeType":"76","messageId":"77","endLine":2,"endColumn":55},{"ruleId":"74","severity":1,"message":"80","line":3,"column":16,"nodeType":"76","messageId":"77","endLine":3,"endColumn":21},{"ruleId":"82","severity":1,"message":"83","line":37,"column":7,"nodeType":"84","endLine":37,"endColumn":38},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'PaddingX' is defined but never used.","'Padding' is defined but never used.","'Slide' is defined but never used.","'Pulse' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'Fade' is defined but never used.","'axios' is defined but never used.","'PaddingY' is defined but never used."]